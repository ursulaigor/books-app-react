{"version":3,"sources":["book.svg","MovieList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieList","state","search","data","fetch","encodeURIComponent","this","then","response","json","setState","items","$ev","console","log","target","value","className","type","placeholder","onChange","changeSearch","bind","onClick","searchBooks","map","item","volumeInfo","title","href","previewLink","src","imageLinks","smallThumbnail","height","description","React","Component","App","alt","logo","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,mOCiD5BC,G,kNA5CbC,MAAQ,CACNC,OAAQ,GACRC,KAAM,I,iDAGR,WAAc,IAAD,OACXC,MAAM,iDAAiDC,mBAAmBC,KAAKL,MAAMC,SAC9EK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAJ,GAAI,OAAI,EAAKO,SAAS,CAAEP,KAAMA,EAAKQ,a,+BAEjD,WACEL,KAAKI,SAAS,CACVR,OAAQ,mB,0BAGd,SAAaU,GACXC,QAAQC,IAAIF,EAAIG,OAAOC,OACvBV,KAAKI,SAAS,CACVR,OAAQU,EAAIG,OAAOC,U,oBAGzB,WACE,OACE,8BACE,yBAAKC,UAAU,cACb,iDACA,2BAAOC,KAAK,OAAOF,MAAOV,KAAKL,MAAMC,OAAQiB,YAAY,aAAaC,SAAUd,KAAKe,aAAaC,KAAKhB,QACvG,4BAAQiB,QAASjB,KAAKkB,YAAYF,KAAKhB,OAAvC,WAEF,6BACKA,KAAKL,MAAME,KAAKsB,KAAI,SAASC,GAE1B,OADAb,QAAQC,IAAIY,EAAKC,WAAWC,OACrB,yBAAKX,UAAU,QAClB,4BAAI,uBAAGY,KAAMH,EAAKC,WAAWG,YAAaf,OAAO,QAAQW,EAAKC,WAAWC,QACzE,yBAAKG,IAAKL,EAAKC,WAAWK,WAAWN,EAAKC,WAAWK,WAAWC,eAAe,GAAIC,OAAO,OAC1F,2BAAIR,EAAKC,WAAWQ,uB,GApChBC,IAAMC,YCkBfC,MAjBf,WAIE,OACE,yBAAKrB,UAAU,OACb,6BACE,4BACE,yBAAKsB,IAAI,OAAOR,IAAKS,IAAMC,MAAM,KAAKP,OAAO,OAC7C,6CAGJ,kBAAC,EAAD,QCLcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.a50bb459.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/book.7bc24604.svg\";","import React from 'react';\nimport './MovieList.css';\n\n\nclass MovieList extends React.Component {\n  state = {\n    search: \"\",\n    data: []\n  };\n\n  searchBooks(){\n    fetch('https://www.googleapis.com/books/v1/volumes?q='+encodeURIComponent(this.state.search))\n          .then(response => response.json())\n          .then(data => this.setState({ data: data.items }));\n  }\n  componentDidMount() {\n    this.setState({\n        search: \"Harry potter\"\n    })\n  }\n  changeSearch($ev){\n    console.log($ev.target.value);\n    this.setState({\n        search: $ev.target.value\n    })\n  }\n  render() {\n    return (\n      <main>\n        <div className=\"search-bar\">\n          <label>Search books: </label>\n          <input type=\"text\" value={this.state.search} placeholder=\"Book title\" onChange={this.changeSearch.bind(this)}></input>\n          <button onClick={this.searchBooks.bind(this)}>Search</button>\n        </div>\n        <div>\n            {this.state.data.map(function(item){\n                console.log(item.volumeInfo.title);\n                return <div className=\"book\">\n                    <h4><a href={item.volumeInfo.previewLink} target=\"_new\">{item.volumeInfo.title}</a></h4>\n                    <img src={item.volumeInfo.imageLinks?item.volumeInfo.imageLinks.smallThumbnail:''} height=\"60\"></img>\n                    <p>{item.volumeInfo.description}</p>\n                </div>   \n            })}\n        </div>\n      </main>\n    );  \n  }\n}\n\nexport default MovieList;","import React from 'react';\nimport logo from './book.svg';\nimport './App.css';\nimport MovieList from './MovieList';\n\nfunction App() {\n\n\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <h1>\n          <img alt=\"logo\" src={logo} width=\"40\" height=\"40\"></img>\n          <span>Books App</span>\n        </h1>\n      </nav>\n      <MovieList></MovieList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}